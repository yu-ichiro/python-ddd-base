/* tslint:disable */
/* eslint-disable */
/**
 * Example API
 * The API to interact with Example
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangeNameRequest
 */
export interface ChangeNameRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeNameRequest
     */
    id: string;
    /**
     * 
     * @type {NameVTO}
     * @memberof ChangeNameRequest
     */
    name: NameVTO;
}
/**
 * 
 * @export
 * @interface ChangeNameResult
 */
export interface ChangeNameResult {
    /**
     * 
     * @type {string}
     * @memberof ChangeNameResult
     */
    id: string;
    /**
     * 
     * @type {NameVTO}
     * @memberof ChangeNameResult
     */
    old_name: NameVTO;
    /**
     * 
     * @type {NameVTO}
     * @memberof ChangeNameResult
     */
    new_name: NameVTO;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface NameVTO
 */
export interface NameVTO {
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    first: string;
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    last: string;
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    first_kana: string;
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    last_kana: string;
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    other?: string;
    /**
     * 
     * @type {string}
     * @memberof NameVTO
     */
    other_kana?: string;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {NameVTO}
     * @memberof UserCreateRequest
     */
    name: NameVTO;
}
/**
 * 
 * @export
 * @interface UserCreateResult
 */
export interface UserCreateResult {
    /**
     * 
     * @type {string}
     * @memberof UserCreateResult
     */
    id: string;
    /**
     * 
     * @type {NameVTO}
     * @memberof UserCreateResult
     */
    name: NameVTO;
}
/**
 * 
 * @export
 * @interface UserListResult
 */
export interface UserListResult {
    /**
     * 
     * @type {Array<UserVTO>}
     * @memberof UserListResult
     */
    users: Array<UserVTO>;
}
/**
 * 
 * @export
 * @interface UserVTO
 */
export interface UserVTO {
    /**
     * 
     * @type {string}
     * @memberof UserVTO
     */
    id: string;
    /**
     * 
     * @type {NameVTO}
     * @memberof UserVTO
     */
    name: NameVTO;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Name
         * @param {ChangeNameRequest} changeNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeNameUserChangeNamePut: async (changeNameRequest: ChangeNameRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeNameRequest' is not null or undefined
            if (changeNameRequest === null || changeNameRequest === undefined) {
                throw new RequiredError('changeNameRequest','Required parameter changeNameRequest was null or undefined when calling changeNameUserChangeNamePut.');
            }
            const localVarPath = `/user/change_name`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof changeNameRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(changeNameRequest !== undefined ? changeNameRequest : {}) : (changeNameRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost: async (userCreateRequest: UserCreateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateRequest' is not null or undefined
            if (userCreateRequest === null || userCreateRequest === undefined) {
                throw new RequiredError('userCreateRequest','Required parameter userCreateRequest was null or undefined when calling createUserUserPost.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userCreateRequest !== undefined ? userCreateRequest : {}) : (userCreateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Users
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersUsersGet: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Name
         * @param {ChangeNameRequest} changeNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeNameUserChangeNamePut(changeNameRequest: ChangeNameRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeNameResult>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changeNameUserChangeNamePut(changeNameRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUserPost(userCreateRequest: UserCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCreateResult>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createUserUserPost(userCreateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Users
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsersUsersGet(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListResult>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listUsersUsersGet(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Change Name
         * @param {ChangeNameRequest} changeNameRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeNameUserChangeNamePut(changeNameRequest: ChangeNameRequest, options?: any): AxiosPromise<ChangeNameResult> {
            return DefaultApiFp(configuration).changeNameUserChangeNamePut(changeNameRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost(userCreateRequest: UserCreateRequest, options?: any): AxiosPromise<UserCreateResult> {
            return DefaultApiFp(configuration).createUserUserPost(userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Users
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsersUsersGet(limit?: number, offset?: number, options?: any): AxiosPromise<UserListResult> {
            return DefaultApiFp(configuration).listUsersUsersGet(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Change Name
     * @param {ChangeNameRequest} changeNameRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changeNameUserChangeNamePut(changeNameRequest: ChangeNameRequest, options?: any) {
        return DefaultApiFp(this.configuration).changeNameUserChangeNamePut(changeNameRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {UserCreateRequest} userCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserUserPost(userCreateRequest: UserCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createUserUserPost(userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Users
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listUsersUsersGet(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listUsersUsersGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


